"use client"
import { useState, useEffect } from "react"
import { Menu, History, Plus, ArrowLeft, RotateCcw, ChevronLeft, ChevronRight } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import Link from "next/link"

interface Flashcard {
  id: string
  front: string
  back: string
  category?: string
}

export default function FlashcardsPage() {
  const [showMenu, setShowMenu] = useState(false)
  const [fileName, setFileName] = useState<string>("")
  const [flashcards, setFlashcards] = useState<Flashcard[]>([])
  const [currentFlashcardIndex, setCurrentFlashcardIndex] = useState(0)
  const [isFlipped, setIsFlipped] = useState(false)

  useEffect(() => {
    // Get uploaded file info from localStorage
    const fileData = localStorage.getItem("uploadedFile")
    if (fileData) {
      const file = JSON.parse(fileData)
      setFileName(file.name)

      // Mock flashcards - would be generated by your FastAPI backend
      const mockFlashcards: Flashcard[] = [
        {
          id: "1",
          front: "What is a data structure?",
          back: "A data structure is a way of organizing and storing data in a computer so that it can be accessed and modified efficiently.",
          category: "Fundamentals",
        },
        {
          id: "2",
          front: "What is the time complexity of binary search?",
          back: "O(log n) - Binary search eliminates half of the remaining elements with each comparison, resulting in logarithmic time complexity.",
          category: "Algorithms",
        },
        {
          id: "3",
          front: "What is the difference between a stack and a queue?",
          back: "A stack follows LIFO (Last In, First Out) principle, while a queue follows FIFO (First In, First Out) principle.",
          category: "Data Structures",
        },
        {
          id: "4",
          front: "What is recursion?",
          back: "Recursion is a programming technique where a function calls itself to solve a smaller instance of the same problem.",
          category: "Programming Concepts",
        },
        {
          id: "5",
          front: "What is the purpose of Big O notation?",
          back: "Big O notation describes the upper bound of an algorithm's time or space complexity, helping analyze performance as input size grows.",
          category: "Algorithm Analysis",
        },
      ]
      setFlashcards(mockFlashcards)
    }
  }, [])

  const handleNextFlashcard = () => {
    if (currentFlashcardIndex < flashcards.length - 1) {
      setCurrentFlashcardIndex(currentFlashcardIndex + 1)
      setIsFlipped(false)
    }
  }

  const handlePreviousFlashcard = () => {
    if (currentFlashcardIndex > 0) {
      setCurrentFlashcardIndex(currentFlashcardIndex - 1)
      setIsFlipped(false)
    }
  }

  const handleFlipCard = () => {
    setIsFlipped(!isFlipped)
  }

  const resetFlashcards = () => {
    setCurrentFlashcardIndex(0)
    setIsFlipped(false)
  }

  const handleNewSession = () => {
    localStorage.removeItem("uploadedFile")
  }

  if (flashcards.length === 0) {
    return (
      <div className="min-h-screen bg-background">
        <header className="flex items-center justify-between p-4 border-b border-border">
          <div className="flex items-center gap-3">
            <Button variant="ghost" size="sm" onClick={() => setShowMenu(!showMenu)} className="p-2">
              <Menu className="h-5 w-5" />
            </Button>
            <Link href="/">
              <Button variant="ghost" size="sm" className="p-2">
                <ArrowLeft className="h-5 w-5" />
              </Button>
            </Link>
            <h1 className="text-xl font-bold font-montserrat text-foreground">Flashcards</h1>
          </div>
        </header>

        <div className="flex items-center justify-center h-64">
          <div className="text-center space-y-4">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-accent mx-auto"></div>
            <p className="text-muted-foreground">Generating flashcards...</p>
          </div>
        </div>
      </div>
    )
  }

  const currentFlashcard = flashcards[currentFlashcardIndex]

  return (
    <div className="min-h-screen bg-background">
      <header className="flex items-center justify-between p-4 border-b border-border">
        <div className="flex items-center gap-3">
          <Button variant="ghost" size="sm" onClick={() => setShowMenu(!showMenu)} className="p-2">
            <Menu className="h-5 w-5" />
          </Button>
          <Link href="/">
            <Button variant="ghost" size="sm" className="p-2">
              <ArrowLeft className="h-5 w-5" />
            </Button>
          </Link>
          <h1 className="text-xl font-bold font-montserrat text-foreground">Flashcards</h1>
        </div>
      </header>

      {/* Hamburger Menu */}
      {showMenu && (
        <div className="absolute top-16 left-4 z-50 bg-card border border-border rounded-lg shadow-lg p-2 min-w-48">
          <Link href="/" onClick={handleNewSession}>
            <Button variant="ghost" className="w-full justify-start gap-2 text-sm">
              <Plus className="h-4 w-4" />
              New Session
            </Button>
          </Link>
          <Button variant="ghost" className="w-full justify-start gap-2 text-sm">
            <History className="h-4 w-4" />
            History
          </Button>
        </div>
      )}

      <main className="p-8">
        <div className="max-w-2xl mx-auto space-y-8">
          {/* Progress and Controls */}
          <div className="flex items-center justify-between">
            <div className="space-y-1">
              <p className="text-sm text-muted-foreground">
                Card {currentFlashcardIndex + 1} of {flashcards.length}
              </p>
              {currentFlashcard.category && (
                <p className="text-xs text-accent font-medium">{currentFlashcard.category}</p>
              )}
            </div>
            <Button variant="outline" size="sm" onClick={resetFlashcards}>
              <RotateCcw className="h-4 w-4 mr-2" />
              Reset
            </Button>
          </div>

          {/* Progress Bar */}
          <div className="w-full bg-muted rounded-full h-2">
            <div
              className="bg-accent h-2 rounded-full transition-all duration-300"
              style={{ width: `${((currentFlashcardIndex + 1) / flashcards.length) * 100}%` }}
            />
          </div>

          {/* Flashcard */}
          <div className="relative h-80">
            <Card
              className={`absolute inset-0 cursor-pointer transition-all duration-500 transform-gpu ${
                isFlipped ? "rotate-y-180" : ""
              }`}
              onClick={handleFlipCard}
              style={{
                transformStyle: "preserve-3d",
                backfaceVisibility: "hidden",
              }}
            >
              {/* Front of card */}
              <div
                className={`absolute inset-0 p-8 flex flex-col items-center justify-center text-center space-y-4 ${
                  isFlipped ? "opacity-0" : "opacity-100"
                }`}
                style={{
                  backfaceVisibility: "hidden",
                }}
              >
                <div className="space-y-4">
                  <p className="text-sm text-muted-foreground uppercase tracking-wide">Question</p>
                  <h2 className="text-xl font-semibold font-montserrat text-foreground leading-relaxed">
                    {currentFlashcard.front}
                  </h2>
                </div>
                <p className="text-sm text-muted-foreground mt-8">Click to reveal answer</p>
              </div>

              {/* Back of card */}
              <div
                className={`absolute inset-0 p-8 flex flex-col items-center justify-center text-center space-y-4 ${
                  isFlipped ? "opacity-100" : "opacity-0"
                }`}
                style={{
                  backfaceVisibility: "hidden",
                  transform: "rotateY(180deg)",
                }}
              >
                <div className="space-y-4">
                  <p className="text-sm text-accent uppercase tracking-wide font-medium">Answer</p>
                  <p className="text-lg text-foreground leading-relaxed">{currentFlashcard.back}</p>
                </div>
                <p className="text-sm text-muted-foreground mt-8">Click to see question</p>
              </div>
            </Card>
          </div>

          {/* Navigation */}
          <div className="flex items-center justify-between">
            <Button
              variant="outline"
              onClick={handlePreviousFlashcard}
              disabled={currentFlashcardIndex === 0}
              className="flex items-center gap-2 bg-transparent"
            >
              <ChevronLeft className="h-4 w-4" />
              Previous
            </Button>

            <div className="flex items-center gap-2">
              <Button
                variant={isFlipped ? "outline" : "default"}
                onClick={handleFlipCard}
                className="bg-accent hover:bg-accent/90"
              >
                {isFlipped ? "Show Question" : "Show Answer"}
              </Button>
            </div>

            <Button
              variant="outline"
              onClick={handleNextFlashcard}
              disabled={currentFlashcardIndex === flashcards.length - 1}
              className="flex items-center gap-2 bg-transparent"
            >
              Next
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>

          {/* Study Stats */}
          <Card className="p-4">
            <div className="flex items-center justify-between text-sm">
              <div className="text-center">
                <p className="font-medium text-foreground">{flashcards.length}</p>
                <p className="text-muted-foreground">Total Cards</p>
              </div>
              <div className="text-center">
                <p className="font-medium text-foreground">{currentFlashcardIndex + 1}</p>
                <p className="text-muted-foreground">Current</p>
              </div>
              <div className="text-center">
                <p className="font-medium text-foreground">{flashcards.length - currentFlashcardIndex - 1}</p>
                <p className="text-muted-foreground">Remaining</p>
              </div>
            </div>
          </Card>
        </div>
      </main>
    </div>
  )
}
