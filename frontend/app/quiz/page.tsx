"use client"
import { useState, useEffect } from "react"
import { Menu, History, Plus, ArrowLeft, RotateCcw } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import Link from "next/link"

interface QuizQuestion {
  id: string
  question: string
  options: string[]
  correctAnswer: number
  explanation?: string
}

export default function QuizPage() {
  const [showMenu, setShowMenu] = useState(false)
  const [fileName, setFileName] = useState<string>("")
  const [quizQuestions, setQuizQuestions] = useState<QuizQuestion[]>([])
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
  const [selectedAnswers, setSelectedAnswers] = useState<number[]>([])
  const [showResults, setShowResults] = useState(false)

  useEffect(() => {
    // Get uploaded file info from localStorage
    const fileData = localStorage.getItem("uploadedFile")
    if (fileData) {
      const file = JSON.parse(fileData)
      setFileName(file.name)

      // Mock quiz questions - would be generated by your FastAPI backend
      const mockQuestions: QuizQuestion[] = [
        {
          id: "1",
          question: "What is the main topic discussed in the document?",
          options: [
            "Machine Learning Algorithms",
            "Data Structures and Algorithms",
            "Web Development Frameworks",
            "Database Management Systems",
          ],
          correctAnswer: 1,
          explanation: "The document primarily focuses on data structures and their implementation.",
        },
        {
          id: "2",
          question: "Which concept is emphasized as most important for beginners?",
          options: [
            "Advanced optimization techniques",
            "Understanding basic principles",
            "Memorizing syntax",
            "Using complex libraries",
          ],
          correctAnswer: 1,
          explanation:
            "The document stresses the importance of understanding fundamental principles before moving to advanced topics.",
        },
        {
          id: "3",
          question: "What approach does the document recommend for learning?",
          options: [
            "Theoretical study only",
            "Practical implementation only",
            "Combination of theory and practice",
            "Learning from videos exclusively",
          ],
          correctAnswer: 2,
          explanation:
            "The document advocates for a balanced approach combining theoretical understanding with hands-on practice.",
        },
      ]
      setQuizQuestions(mockQuestions)
    }
  }, [])

  const handleAnswerSelect = (answerIndex: number) => {
    const newAnswers = [...selectedAnswers]
    newAnswers[currentQuestionIndex] = answerIndex
    setSelectedAnswers(newAnswers)
  }

  const handleNextQuestion = () => {
    if (currentQuestionIndex < quizQuestions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1)
    } else {
      setShowResults(true)
    }
  }

  const handlePreviousQuestion = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(currentQuestionIndex - 1)
    }
  }

  const calculateScore = () => {
    return selectedAnswers.reduce((score, answer, index) => {
      return score + (answer === quizQuestions[index]?.correctAnswer ? 1 : 0)
    }, 0)
  }

  const restartQuiz = () => {
    setCurrentQuestionIndex(0)
    setSelectedAnswers([])
    setShowResults(false)
  }

  const handleNewSession = () => {
    localStorage.removeItem("uploadedFile")
  }

  if (quizQuestions.length === 0) {
    return (
      <div className="min-h-screen bg-background">
        <header className="flex items-center justify-between p-4 border-b border-border">
          <div className="flex items-center gap-3">
            <Button variant="ghost" size="sm" onClick={() => setShowMenu(!showMenu)} className="p-2">
              <Menu className="h-5 w-5" />
            </Button>
            <Link href="/">
              <Button variant="ghost" size="sm" className="p-2">
                <ArrowLeft className="h-5 w-5" />
              </Button>
            </Link>
            <h1 className="text-xl font-bold font-montserrat text-foreground">Quiz Mode</h1>
          </div>
        </header>

        <div className="flex items-center justify-center h-64">
          <div className="text-center space-y-4">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-accent mx-auto"></div>
            <p className="text-muted-foreground">Generating quiz questions...</p>
          </div>
        </div>
      </div>
    )
  }

  if (showResults) {
    const score = calculateScore()
    const percentage = Math.round((score / quizQuestions.length) * 100)

    return (
      <div className="min-h-screen bg-background">
        <header className="flex items-center justify-between p-4 border-b border-border">
          <div className="flex items-center gap-3">
            <Button variant="ghost" size="sm" onClick={() => setShowMenu(!showMenu)} className="p-2">
              <Menu className="h-5 w-5" />
            </Button>
            <Link href="/">
              <Button variant="ghost" size="sm" className="p-2">
                <ArrowLeft className="h-5 w-5" />
              </Button>
            </Link>
            <h1 className="text-xl font-bold font-montserrat text-foreground">Quiz Results</h1>
          </div>
        </header>

        {/* Hamburger Menu */}
        {showMenu && (
          <div className="absolute top-16 left-4 z-50 bg-card border border-border rounded-lg shadow-lg p-2 min-w-48">
            <Link href="/" onClick={handleNewSession}>
              <Button variant="ghost" className="w-full justify-start gap-2 text-sm">
                <Plus className="h-4 w-4" />
                New Session
              </Button>
            </Link>
            <Button variant="ghost" className="w-full justify-start gap-2 text-sm">
              <History className="h-4 w-4" />
              History
            </Button>
          </div>
        )}

        <main className="p-8">
          <div className="max-w-2xl mx-auto space-y-8">
            <div className="text-center space-y-4">
              <h2 className="text-3xl font-bold font-montserrat text-foreground">Quiz Complete!</h2>
              <div className="space-y-2">
                <p className="text-6xl font-bold text-accent">{percentage}%</p>
                <p className="text-lg text-muted-foreground">
                  You scored {score} out of {quizQuestions.length} questions correctly
                </p>
              </div>
            </div>

            <Card className="p-6 space-y-4">
              <h3 className="text-lg font-semibold font-montserrat">Review Your Answers</h3>
              <div className="space-y-4">
                {quizQuestions.map((question, index) => {
                  const userAnswer = selectedAnswers[index]
                  const isCorrect = userAnswer === question.correctAnswer

                  return (
                    <div key={question.id} className="space-y-2">
                      <p className="font-medium">
                        {index + 1}. {question.question}
                      </p>
                      <div className="pl-4 space-y-1">
                        <p className={`text-sm ${isCorrect ? "text-green-600" : "text-red-600"}`}>
                          Your answer: {question.options[userAnswer]} {isCorrect ? "✓" : "✗"}
                        </p>
                        {!isCorrect && (
                          <p className="text-sm text-green-600">
                            Correct answer: {question.options[question.correctAnswer]}
                          </p>
                        )}
                        {question.explanation && (
                          <p className="text-sm text-muted-foreground italic">{question.explanation}</p>
                        )}
                      </div>
                    </div>
                  )
                })}
              </div>
            </Card>

            <div className="flex justify-center">
              <Button onClick={restartQuiz} size="lg" className="bg-accent hover:bg-accent/90">
                <RotateCcw className="h-4 w-4 mr-2" />
                Take Quiz Again
              </Button>
            </div>
          </div>
        </main>
      </div>
    )
  }

  const currentQuestion = quizQuestions[currentQuestionIndex]
  const selectedAnswer = selectedAnswers[currentQuestionIndex]

  return (
    <div className="min-h-screen bg-background">
      <header className="flex items-center justify-between p-4 border-b border-border">
        <div className="flex items-center gap-3">
          <Button variant="ghost" size="sm" onClick={() => setShowMenu(!showMenu)} className="p-2">
            <Menu className="h-5 w-5" />
          </Button>
          <Link href="/">
            <Button variant="ghost" size="sm" className="p-2">
              <ArrowLeft className="h-5 w-5" />
            </Button>
          </Link>
          <h1 className="text-xl font-bold font-montserrat text-foreground">Quiz Mode</h1>
        </div>
      </header>

      {/* Hamburger Menu */}
      {showMenu && (
        <div className="absolute top-16 left-4 z-50 bg-card border border-border rounded-lg shadow-lg p-2 min-w-48">
          <Link href="/" onClick={handleNewSession}>
            <Button variant="ghost" className="w-full justify-start gap-2 text-sm">
              <Plus className="h-4 w-4" />
              New Session
            </Button>
          </Link>
          <Button variant="ghost" className="w-full justify-start gap-2 text-sm">
            <History className="h-4 w-4" />
            History
          </Button>
        </div>
      )}

      <main className="p-8">
        <div className="max-w-2xl mx-auto space-y-8">
          {/* Progress Bar */}
          <div className="space-y-2">
            <div className="flex justify-between text-sm text-muted-foreground">
              <span>
                Question {currentQuestionIndex + 1} of {quizQuestions.length}
              </span>
              <span>{Math.round(((currentQuestionIndex + 1) / quizQuestions.length) * 100)}% Complete</span>
            </div>
            <div className="w-full bg-muted rounded-full h-2">
              <div
                className="bg-accent h-2 rounded-full transition-all duration-300"
                style={{ width: `${((currentQuestionIndex + 1) / quizQuestions.length) * 100}%` }}
              />
            </div>
          </div>

          {/* Question Card */}
          <Card className="p-8 space-y-6">
            <h2 className="text-xl font-semibold font-montserrat text-foreground">{currentQuestion.question}</h2>

            <div className="space-y-3">
              {currentQuestion.options.map((option, index) => (
                <Button
                  key={index}
                  variant={selectedAnswer === index ? "default" : "outline"}
                  className={`w-full text-left justify-start p-4 h-auto ${
                    selectedAnswer === index ? "bg-accent text-accent-foreground" : ""
                  }`}
                  onClick={() => handleAnswerSelect(index)}
                >
                  <span className="mr-3 font-medium">{String.fromCharCode(65 + index)}.</span>
                  {option}
                </Button>
              ))}
            </div>
          </Card>

          {/* Navigation */}
          <div className="flex justify-between">
            <Button variant="outline" onClick={handlePreviousQuestion} disabled={currentQuestionIndex === 0}>
              Previous
            </Button>

            <Button
              onClick={handleNextQuestion}
              disabled={selectedAnswer === undefined}
              className="bg-accent hover:bg-accent/90"
            >
              {currentQuestionIndex === quizQuestions.length - 1 ? "Finish Quiz" : "Next Question"}
            </Button>
          </div>
        </div>
      </main>
    </div>
  )
}
